global = {}
pipe = {}
attack_shells = []
pipe["path"] = null
pipe["file"] = null
crypto = include_lib("/lib/crypto.so")
ls = 0
cd1 = 0
password = null
Shell = {}
test = {}
SHELL = null
MyFile = null
UrFile = null
belt = []
okay = false
live = false
map = {}
names = []
computer = get_shell.host_computer
the_path = null
FILE = null
FILE = get_shell.host_computer.File("/root")
prompt = null
global.opt = null
PipeVal = null
color1 = "<color=#3550F9>"//blue
color2 = "<color=#FF8000>"//orange
color3 = "<color=#FE71F1>"//pink
u = "<u>"
u2 = "</u>"
b = "<b>"
b2 = "</b>"
hidden_file = null
//print(color1+"@@@@@@@@@@@@@")
//print(color2+"@@@@@@@@@@@@@")
//print(color3+"@@@@@@@@@@@@@")
dir = null

dir = current_path.split("/")[-1]
if active_user != "root" then
	exit("<color=yellow>Must run as root.")
end if
if dir != "root" then
	exit("<color=yellow>This program must be in the /root dir.")
end if

PATH = function(shell, destination, file)
	hidden_file = get_shell.host_computer.File("/root/.pwd")
	if not hidden_file then
		get_shell.host_computer.touch("/root", ".pwd")
		hidden_file = file
	end if
	get_shell.scp(location, destination, shell)
    shell.launch(destination+"/"+hidden_file.name)

end function


prompt = "\n"+b+color1+"["+b2+color2+active_user+color1+b+"]"+b2+color1+b+"<u><"+b2+color3+current_path+color1+b+">"+b2+"</u></color>~$ "

//ERROR TEMPLATE : print("\n"+color1+b+"["+b2+color3+"ERROR "+color1+b+"("+b2+color3+global.opt[0]+color1+b+"):"+b2+color2+" Command not found..."+color1+b+"]"+b2)

remove_repeats = function(string, list)
	lines = string.split("\n")
	lines_no_repeats = []
	for line in lines
		if lines_no_repeats.indexOf(line) == null then lines_no_repeats.push(line)
	end for
	for item in lines_no_repeats
		list.push(item)
	end for
	print(list)
	print("____________________")
	print(list.join("\n"))
end function


while true
	if live == true then
		result = extract(Shell, "pull_keep", "shell")
		shell = result[0]
		ip = result[1]
		user = result[2][0]
		password = result[3]
		global.opt = user_input(prompt).split(" ")
	else
		global.opt = user_input(prompt).split(" ")
	end if

	basics = ["cd", "ls", "ps", "pwd", "ifconfig", "iwconfig", "iwlist", "cat", "rm", "mv", "cp", "ssh", "ftp", "mkdir", "rmdir", "chmod", "reboot", "whois", "sudo", "useradd", "userdel", "passwd", "nslookup", "build", "touch", "chown", "chgrp", "groupadd", "groupdel", "groups", "kill", "ping", "airmon", "aireplay", "aircrack", "nmap", "decipher", "nano"]
	basic_descriptions = ["Move through directories.", "Display the contents of a directory.", "Display the active processes of the operating system.", "Display current path", "Display the current information about the network devices installed on the machine.", "Used to connect to wifi networks.", "Display the list of wifi networks visible from your computer.", "Shows the contents of a text file.", "Used to delete any file if you have the appropriate permissions.", "Used to move files between folders and can also rename files.", "Used to copy files between folders.", "Used to access to private servers through a back door.", "Used for the transfer of computer files between a client and server on a computer network.", "Used to create folders.", "Used to delete folders.", "Used to modify the permissions of a file or folder.", "Used to reboot your current machine.", "Display public information about the IP address.", "Used to run programs as root.", "Used to create new users and change the password of a user on the machine.", "Used for deleting user accounts.", "Used to change a password of a user. Must be ran as root.", "Used to obtain the ip address of a domain.", "Used to compile .src files.", "Used for the creation of empty files." , "Used to change the designated owner of a file.", "Used to change the designated group of a file.", "Used to add a new designated group.", "Used to remove a new designated group.", "Displays the designated groups related to a certain user.", "Used to kill processes.", "Used to check if the provided ip address is reachable.", "Used to enable monitor mode on wireless interfaces", "Used to inject frames on wireless interfaces.", "Used to crack the file generated by aireplay.", "Used to scan public remote ips to find open ports.", "Used to decrypt certain system files and converts it to plain text.", "Used to modify the contents of a file."]
	//pipe function

	extract = function(map, tag, key)
		if tag == "pull_remove" then
			global.value = map[key]
			map.remove(map.indexOf(key))
			return global.value
		end if

		if tag == "pull_keep" then
			global.value = map[key]
			return global.value
		end if
	end function
	//command prompt style one --[start]
	command_list_style1 = function(list, string)
		a=1
		for item in list
			print("["+a+"] " + item)
			a=a+1
		end for
		global.opt = user_input(string).split(" ")
		return list[global.opt[0].val-1]
	end function
	//x=command_list_style1(basics, "\n"+b+color1+"["+b2+color2+active_user+color1+b+"]"+b2+color1+b+"<u></"+b2+color3+current_path.split("/")[1]+color1+b+">"+b2+"</u></color>~$ ")
	//command prompt style1 --[end]

	//display prompt style1 --[start]
	display_list_style1 = function(list1, list2, title)
		for item in list1
			for string in list2
				index_item = list1.indexOf(item)
				index_string = list2.indexOf(string)
				if index_item == index_string then
					print(color1+b+"----------------------------------------------------------"+b2+"\n"+color1+b+"["+b2+color3+item+color1+b+"]:"+b2+" \n "+color1+b+"--"+b2+color2+string)
				end if
			end for
		end for
		print(color1+b+"----------------------------------------------------------"+b2)
		print(color2+b+title+b2)
	end function
	//x=display_list_style1(basics, basic_descriptions, "user_input text here")
	//display prompt style1 --[end]

	if global.opt[0] == "clear" and global.opt.len == 1 then
		clear_screen
		continue
	end if

	if global.opt[0] == "exit" and global.opt.len == 1 then

		if live == true then
			prompt = "\n"+b+color1+"["+b2+color2+active_user+color1+b+"]"+b2+color1+b+"<u><"+b2+color3+current_path+color1+b+">"+b2+"</u></color>~$ "
			live = false
			Shell = {}
			pipe["file"] = null
			pipe["path"] = null
			attack_shells = []
			print(color1+"Disconnected from "+color1+b+ip+b2)
			continue
		end if

		if live != true then
			clear_screen
			exit()
		end if
		continue
	end if

	if global.opt[0] == "" and global.opt.len == 1 then
		clear_screen
		continue
	end if

	if (global.opt[0] == "-h" or global.opt[0] == "--help") and global.opt.len == 1 then

		x=display_list_style1(basics, basic_descriptions, "BASICS")
		continue
	end if

	if global.opt[0] == "cd" and global.opt.len == 1 then
		clear_screen
		continue
	end if


	if global.opt[0] == "cd" and global.opt.len == 2 and global.opt[1] == ".." then

		if live == true then
			file_list = []
			folder_list = []
			global.dir = global.opt[1]

			result = extract(Shell, "pull_keep", "shell")
			shell = result[0]
			ip = result[1]
			user = result[2]
			password = result[3]

			if not pipe.hasIndex("file") then
				FILE = shell.host_computer.File(current_path)
				pipe["file"] = FILE
				pipe["path"] = pipe["file"].path
			else if pipe.hasIndex("file") and typeof(pipe["file"]) == "null" then
				FILE = shell.host_computer.File(current_path)
				pipe["file"] = FILE
				pipe["path"] = pipe["file"].path
			else if pipe.hasIndex("file") and typeof(pipe["file"]) == "file" then
				pipe["path"] = pipe["file"].path
				FILE = shell.host_computer.File(pipe["path"])
			else
			end if


			if global.opt[1].values[0] != "/" and global.opt[1].values.len == 2 then

				FILE_name = FILE.path
				FILE_name = FILE_name.split("/")
				FILE_name.remove(-1)
				if FILE_name == [""] then FILE_name = ["/"]
				if FILE_name != ["/"] then FILE_name[-1] = FILE_name.join("/")
				prompt = "\n"+b+color1+"["+b2+"<color=red>"+user+color1+b+"]"+b2+color1+b+u+"<"+color2+ip+"</color>>"+u2+b2+"</color>"+"<u><"+b2+color3+shell.host_computer.File(FILE_name[-1]).path+color1+b+">"+b2+"</u></color>~$ "
				//print(prompt2)
				cd1=cd1+1
				pipe["file"] = shell.host_computer.File(FILE_name[-1])
				pipe["path"] = pipe["file"].path
				okay = true
			end if
			continue
		end if


		if live != true then
			file_list = []
			folder_list = []
			global.dir = global.opt[1]

			if not pipe.hasIndex("file") then
				FILE = get_shell.host_computer.File(current_path)
				pipe["file"] = FILE
				pipe["path"] = pipe["file"].path
			else if pipe.hasIndex("file") and typeof(pipe["file"]) == "null" then
				FILE = get_shell.host_computer.File(current_path)
				pipe["file"] = FILE
				pipe["path"] = pipe["file"].path
			else if pipe.hasIndex("file") and typeof(pipe["file"]) == "file" then
				pipe["path"] = pipe["file"].path
				FILE = get_shell.host_computer.File(pipe["path"])
			else
			end if

			if global.opt[1].values[0] != "/" and global.opt[1].values.len == 2 then
				FILE_name = FILE.path
				FILE_name = FILE_name.split("/")
				FILE_name.remove(-1)
				if FILE_name == [""] then FILE_name = ["/"]
				if FILE_name != ["/"] then FILE_name[-1] = FILE_name.join("/")
				prompt = "\n"+b+color1+"["+b2+color2+active_user+color1+b+"]"+b2+color1+b+"<u><"+b2+color3+FILE_name[-1]+color1+b+">"+b2+"</u></color>~$ "
				pipe["file"] = get_shell.host_computer.File(FILE_name[-1])
				pipe["path"] = pipe["file"]
				okay = true
			end if

			continue
		end if

		continue
	end if



	if global.opt[0] == "cd" and typeof(global.opt[1].split("/")) == "list" then

		if live == true then

			result = extract(Shell, "pull_keep", "shell")
			shell = result[0]
			ip = result[1]
			user = result[2]
			password = result[3]

			//new_path = FILE.path+global.opt[1]

			if not pipe.hasIndex("file") then
			  FILE = shell.host_computer.File(global.opt[1])
			  if not FILE then
			    FILE = null
			  else
			    pipe["file"] = FILE
			    pipe["path"] = pipe["file"].path
			    FILE = shell.host_computer.File(pipe["path"]+global.opt[1])
			  end if
			else if pipe.hasIndex("file") and typeof(pipe["file"]) == "null" then
			  FILE = shell.host_computer.File(global.opt[1])
			  if not FILE then
			    FILE = null
			  else
			    pipe["file"] = FILE
			    pipe["path"] = pipe["file"].path
			    FILE = shell.host_computer.File(pipe["path"]+global.opt[1])
			  end if
			else if pipe.hasIndex("file") and typeof(pipe["file"]) == "file" then
			  pipe["path"] = pipe["file"].path
			  FILE = shell.host_computer.File(pipe["path"]+global.opt[1])
			  if typeof(FILE) != "file" then
			    FILE = null
			  else
			    pipe["file"] = FILE
			    pipe["path"] = pipe["file"].path
			  end if
			  //TEST IF POSSIBLE TO JUMP FROM '/' TO '/HOME/GUEST'
			else
			end if

			if not FILE then FILE = shell.host_computer.File(global.opt[1])
			if FILE then pipe["file"] = FILE
			if not FILE or FILE == null then
			  FILE = global.opt[1]
			  print("\n"+color1+b+"["+b2+color3+"ERROR "+color1+b+"("+b2+color3+FILE+color1+b+"):"+b2+color2+" Is not a folder."+color1+b+"]"+b2)
			  wait(2)
			  clear_screen
			  continue
			else
			  prompt = "\n"+b+color1+"["+b2+"<color=red>"+user+color1+b+"]"+b2+color1+b+u+"<"+color2+ip+"</color>>"+u2+b2+"</color>"+"<u><"+b2+color3+shell.host_computer.File(FILE.path).path+color1+b+">"+b2+"</u></color>~$ "
			  pipe["file"] = FILE
			  pipe["path"] = pipe["file"]
			  continue
			end if

			folders = FILE.get_folders
			files = FILE.get_files
			if not folders and not files then continue
			if files then
			  for file in files
			    file_list.push(file)
			  end for
			end if
			if folders then
			  for folder in folders
			    folder_list.push(folder)
			  end for
			end if
			pipe["cd_folders"] = folder_list
			pipe["cd_files"] = file_list
			continue
			end if


		if live != true then
			//new_path = FILE.path+global.opt[1]

			if not pipe.hasIndex("file") then
				FILE = get_shell.host_computer.File(global.opt[1])
				if not FILE then
					FILE = null
				else
					pipe["file"] = FILE
					pipe["path"] = pipe["file"].path
					FILE = get_shell.host_computer.File(pipe["path"]+global.opt[1])
				end if
			else if pipe.hasIndex("file") and typeof(pipe["file"]) == "null" then
				FILE = get_shell.host_computer.File(global.opt[1])
				if not FILE then
					FILE = null
				else
					pipe["file"] = FILE
					pipe["path"] = pipe["file"].path
					FILE = get_shell.host_computer.File(pipe["path"]+global.opt[1])
				end if
			else if pipe.hasIndex("file") and typeof(pipe["file"]) == "file" then
				pipe["path"] = pipe["file"].path
				FILE = get_shell.host_computer.File(pipe["path"]+global.opt[1])
				if typeof(FILE) != "file" then
					FILE = null
				else
					pipe["file"] = FILE
					pipe["path"] = pipe["file"].path
				end if
				//TEST IF POSSIBLE TO JUMP FROM '/' TO '/HOME/GUEST'
			else
			end if

			if not FILE then FILE = get_shell.host_computer.File(global.opt[1])
			if FILE then pipe["file"] = FILE
			if not FILE or FILE == null then
				FILE = global.opt[1]
				print("\n"+color1+b+"["+b2+color3+"ERROR "+color1+b+"("+b2+color3+FILE+color1+b+"):"+b2+color2+" Is not a folder."+color1+b+"]"+b2)
				wait(2)
				clear_screen
				continue
			else
				prompt = "\n"+b+color1+"["+b2+color2+active_user+color1+b+"]"+b2+color1+b+"<u><"+b2+color3+FILE.path+color1+b+">"+b2+"</u></color>~$ "
				pipe["file"] = FILE
				pipe["path"] = pipe["file"]
				continue
			end if

			folders = FILE.get_folders
			files = FILE.get_files
			if not folders and not files then continue
			if files then
				for file in files
					file_list.push(file)
				end for
			end if
			if folders then
				for folder in folders
					folder_list.push(folder)
				end for
			end if
			pipe["cd_folders"] = folder_list
			pipe["cd_files"] = file_list
			continue
		end if

		continue
	end if

	if global.opt[0] == "ls" and global.opt.len == 1 then
		u2 = "</u>"
		under1 = "<color=#AE1BF7><u>"//binary
		under2 = "<color=#10CB15><u>"//src
		under3 = "<color=#3D57F0><u>"//txt
		under4 = "<color=#E82E1B><u>"
		if live == true then

			file_list = []
			folder_list = []

			result = extract(Shell, "pull_keep", "shell")
			shell = result[0]
			ip = result[1]
			user = result[2]
			password = result[3]


			if not pipe.hasIndex("file") then
				FILE = shell.host_computer.File(current_path)
				pipe["file"] = FILE
				pipe["path"] = pipe["file"].path
			else if pipe.hasIndex("file") and typeof(pipe["file"]) == "null" then
				FILE = shell.host_computer.File(current_path)
				pipe["file"] = FILE
				pipe["path"] = pipe["file"].path
			else if pipe.hasIndex("file") and typeof(pipe["file"]) == "file" then
				pipe["path"] = pipe["file"].path
				FILE = shell.host_computer.File(pipe["path"])
				pipe["file"] = FILE
			else
			end if

			if typeof(FILE.get_folders) != "list" then FILE = shell.host_computer.File(pipe["file"].path)
			pipe["path"] = pipe["file"]
			folders = FILE.get_folders
			files = FILE.get_files
			if not folders and not files then continue
			if files then
				for file in files
					file_list.push(file)
				end for
			end if
			if folders then
				for folder in folders
					folder_list.push(folder)
				end for
			end if
			pipe["ls1_folders"] = folder_list
			pipe["ls1_files"] = file_list
			//begin ls code:
			global.file_objects = extract(pipe, "pull_keep", "ls1_files")
			global.folder_objects = extract(pipe, "pull_keep", "ls1_folders")

			file_objects = global.file_objects
			folder_objects = global.folder_objects

			if not file_objects then file_objects = null
			if not folder_objects then folder_objects = null

			if file_objects or folder_objects then
				underline = null
				if file_objects != null then
					output = ""
					list = []
					for file in file_objects
						nameFile = file.name
						if file.is_binary and not file.is_folder then underline = under1
						if not file.is_binary then underline = under3
						if nameFile.len > 4 then
							Name = nameFile.values
							last = Name.indexOf(Name[-1])
							Name1 = Name[last]
							Name2 = Name[last-1]
							Name3 = Name[last-2]
							Name4 = Name[last-3]
							NAME = [Name1,Name2,Name3,Name4].join("")
							if NAME == "crs." and not file.is_binary and not file.is_folder then underline = under2
						end if
						if nameFile.values[0] == "." then underline = under4
						permission = file.permissions
						owner = file.owner
						size = file.size
						size = size.val/1000000
						size = round(size, 0)
						group = file.group
						output = color2+permission+" "+color3+owner+" "+group+" "+color1+size+"MB "+underline+color2+b+nameFile+b2+u2
						list.push(output)
					end for
					list = ""+list.join("\n")
					print(format_columns(list))
				end if
				display = null
				if folder_objects != null then
					output = ""
					list = []
					for folder in folder_objects
						nameFolder = folder.name
						if nameFolder.values[0] == "." then display = under4+color2+b+nameFolder+b2+u2 else display = color2+b+nameFolder+b2
						permission = folder.permissions
						owner = folder.owner
						size = folder.size
						size = size.val/1000000
						size = round(size, 0)
						group = folder.group
						output = color2+permission+" "+color3+owner+" "+group+" "+color1+size+"MB "+display
						list.push(output)
					end for
					list = ""+list.join("\n")
					print(format_columns(list))
				end if
			end if
			continue
		end if

		if live != true then
			file_list = []
			folder_list = []

			if not pipe.hasIndex("file") then
				FILE = get_shell.host_computer.File(current_path)
				pipe["file"] = FILE
				pipe["path"] = pipe["file"].path
			else if pipe.hasIndex("file") and typeof(pipe["file"]) == "null" then
				FILE = get_shell.host_computer.File(current_path)
				pipe["file"] = FILE
				pipe["path"] = pipe["file"].path
			else if pipe.hasIndex("file") and typeof(pipe["file"]) == "file" then
				pipe["path"] = pipe["file"].path
				FILE = get_shell.host_computer.File(pipe["path"])
				pipe["file"] = FILE
			else
			end if

			if typeof(FILE.get_folders) != "list" then FILE = get_shell.host_computer.File(pipe["file"].path)
			pipe["path"] = pipe["file"]
			folders = FILE.get_folders
			files = FILE.get_files
			if not folders and not files then continue
			if files then
				for file in files
					file_list.push(file)
				end for
			end if
			if folders then
				for folder in folders
					folder_list.push(folder)
				end for
			end if
			pipe["ls1_folders"] = folder_list
			pipe["ls1_files"] = file_list
			//begin ls code:
			global.file_objects = extract(pipe, "pull_keep", "ls1_files")
			global.folder_objects = extract(pipe, "pull_keep", "ls1_folders")

			file_objects = global.file_objects
			folder_objects = global.folder_objects

			if not file_objects then file_objects = null
			if not folder_objects then folder_objects = null

			if file_objects or folder_objects then
				underline = null
				if file_objects != null then
					output = ""
					list = []
					for file in file_objects
						nameFile = file.name
						if file.is_binary and not file.is_folder then underline = under1
						if not file.is_binary then underline = under3
						if nameFile.len > 4 then
							Name = nameFile.values
							last = Name.indexOf(Name[-1])
							Name1 = Name[last]
							Name2 = Name[last-1]
							Name3 = Name[last-2]
							Name4 = Name[last-3]
							NAME = [Name1,Name2,Name3,Name4].join("")
							if NAME == "crs." and not file.is_binary and not file.is_folder then underline = under2
						end if
						if nameFile.values[0] == "." then underline = under4
						permission = file.permissions
						owner = file.owner
						size = file.size
						size = size.val/1000000
						size = round(size, 0)
						group = file.group
						output = color2+permission+" "+color3+owner+" "+group+" "+color1+size+"MB "+underline+color2+b+nameFile+b2+u2
						list.push(output)
					end for
					list = ""+list.join("\n")
					print(format_columns(list))
				end if
				display = null
				if folder_objects != null then
					output = ""
					list = []
					for folder in folder_objects
						nameFolder = folder.name
						if nameFolder.values[0] == "." then display = under4+color2+b+nameFolder+b2+u2 else display = color2+b+nameFolder+b2
						permission = folder.permissions
						owner = folder.owner
						size = folder.size
						size = size.val/1000000
						size = round(size, 0)
						group = folder.group
						output = color2+permission+" "+color3+owner+" "+group+" "+color1+size+"MB "+display
						list.push(output)
					end for
					list = ""+list.join("\n")
					print(format_columns(list))
				end if
			end if
			continue
		end if



		continue
	end if

	if global.opt[0] == "ls" and global.opt.len == 2 and typeof(global.opt[1].split("/")) == "list" then
		u2 = "</u>"
		under1 = "<color=#AE1BF7><u>"//binary
		under2 = "<color=#10CB15><u>"//src
		under3 = "<color=#3D57F0><u>"//txt
		under4 = "<color=#E82E1B><u>"

		if live == true then
			file_list = []
			folder_list = []

			result = extract(Shell, "pull_keep", "shell")
			shell = result[0]
			ip = result[1]
			user = result[2]
			password = result[3]

			if not pipe.hasIndex("file") then
				FILE = shell.host_computer.File(global.opt[1])
				if typeof(FILE) != "file" then
					FILE = null
				else
					pipe["file"] = FILE
					pipe["path"] = pipe["file"].path
				end if
			else if pipe.hasIndex("file") and typeof(pipe["file"]) == "null" then
				FILE = shell.host_computer.File(global.opt[1])
				if typeof(FILE) != "file" then
					FILE = null
				else
					pipe["file"] = FILE
					pipe["path"] = pipe["file"].path
				end if
			else if pipe.hasIndex("file") and typeof(pipe["file"]) == "file" then
				FILE = shell.host_computer.File(global.opt[1])
				pipe["file"] = FILE
				if typeof(pipe["file"]) != "file" then
					FILE = null
				else
					FILE = pipe["file"]
					pipe["path"] = pipe["file"].path
				end if
			else
			end if

			if not FILE or FILE == null then
				FILE = global.opt[1]
				clear_screen
				print("\n"+color1+b+"["+b2+color3+"ERROR "+color1+b+"("+b2+color3+FILE+color1+b+"):"+b2+color2+" Is not a folder."+color1+b+"]"+b2)
				wait(2)
				clear_screen
				continue
			end if

			if typeof(FILE.get_folders) != "list" then FILE = shell.host_computer.File(pipe["file"].path)
			pipe["path"] = pipe["file"]
			folders = FILE.get_folders
			files = FILE.get_files
			if not folders and not files then continue
			if files then
				for file in files
					file_list.push(file)
				end for
			end if
			if folders then
				for folder in folders
					folder_list.push(folder)
				end for
			end if
			pipe["ls2_folders"] = folder_list
			pipe["ls2_files"] = file_list
			//begin ls code:
			global.file_objects = extract(pipe, "pull_keep", "ls2_files")
			global.folder_objects = extract(pipe, "pull_keep", "ls2_folders")

			file_objects = global.file_objects
			folder_objects = global.folder_objects

			if not file_objects then file_objects = null
			if not folder_objects then folder_objects = null

			if file_objects or folder_objects then
				underline = null
				if file_objects != null then
					output = ""
					list = []
					for file in file_objects
						nameFile = file.name
						if file.is_binary and not file.is_folder then underline = under1
						if not file.is_binary then underline = under3
						if nameFile.len > 4 then
							Name = nameFile.values
							last = Name.indexOf(Name[-1])
							Name1 = Name[last]
							Name2 = Name[last-1]
							Name3 = Name[last-2]
							Name4 = Name[last-3]
							NAME = [Name1,Name2,Name3,Name4].join("")
							if NAME == "crs." and not file.is_binary and not file.is_folder then underline = under2
						end if
						if nameFile.values[0] == "." then underline = under4
						permission = file.permissions
						owner = file.owner
						size = file.size
						size = size.val/1000000
						size = round(size, 0)
						group = file.group
						output = color2+permission+" "+color3+owner+" "+group+" "+color1+size+"MB "+underline+color2+b+nameFile+b2+u2
						list.push(output)
					end for
					list = ""+list.join("\n")
					print(format_columns(list))
				end if
				display = null
				if folder_objects != null then
					output = ""
					list = []
					for folder in folder_objects
						nameFolder = folder.name
						if nameFolder.values[0] == "." then display = under4+color2+b+nameFolder+b2+u2 else display = color2+b+nameFolder+b2
						permission = folder.permissions
						owner = folder.owner
						size = folder.size
						size = size.val/1000000
						size = round(size, 0)
						group = folder.group
						output = color2+permission+" "+color3+owner+" "+group+" "+color1+size+"MB "+display
						list.push(output)
					end for
					list = ""+list.join("\n")
					print(format_columns(list))
				end if
			end if
			continue
		end if

		if live != true then
			file_list = []
			folder_list = []

			if not pipe.hasIndex("file") then
				FILE = get_shell.host_computer.File(global.opt[1])
				if typeof(FILE) != "file" then
					FILE = null
				else
					pipe["file"] = FILE
					pipe["path"] = pipe["file"].path
				end if
			else if pipe.hasIndex("file") and typeof(pipe["file"]) == "null" then
				FILE = get_shell.host_computer.File(global.opt[1])
				if typeof(FILE) != "file" then
					FILE = null
				else
					pipe["file"] = FILE
					pipe["path"] = pipe["file"].path
				end if
			else if pipe.hasIndex("file") and typeof(pipe["file"]) == "file" then
				FILE = get_shell.host_computer.File(global.opt[1])
				pipe["file"] = FILE
				if typeof(pipe["file"]) != "file" then
					FILE = null
				else
					FILE = pipe["file"]
					pipe["path"] = pipe["file"].path
				end if
			else
			end if

			if not FILE or FILE == null then
				FILE = global.opt[1]
				clear_screen
				print("\n"+color1+b+"["+b2+color3+"ERROR "+color1+b+"("+b2+color3+FILE+color1+b+"):"+b2+color2+" Is not a folder."+color1+b+"]"+b2)
				wait(2)
				clear_screen
				continue
			end if

			if typeof(FILE.get_folders) != "list" then FILE = get_shell.host_computer.File(pipe["file"].path)
			pipe["path"] = pipe["file"]
			folders = FILE.get_folders
			files = FILE.get_files
			if not folders and not files then continue
			if files then
				for file in files
					file_list.push(file)
				end for
			end if
			if folders then
				for folder in folders
					folder_list.push(folder)
				end for
			end if
			pipe["ls2_folders"] = folder_list
			pipe["ls2_files"] = file_list
			//begin ls code:
			global.file_objects = extract(pipe, "pull_keep", "ls2_files")
			global.folder_objects = extract(pipe, "pull_keep", "ls2_folders")

			file_objects = global.file_objects
			folder_objects = global.folder_objects

			if not file_objects then file_objects = null
			if not folder_objects then folder_objects = null

			if file_objects or folder_objects then
				underline = null
				if file_objects != null then
					output = ""
					list = []
					for file in file_objects
						nameFile = file.name
						if file.is_binary and not file.is_folder then underline = under1
						if not file.is_binary then underline = under3
						if nameFile.len > 4 then
							Name = nameFile.values
							last = Name.indexOf(Name[-1])
							Name1 = Name[last]
							Name2 = Name[last-1]
							Name3 = Name[last-2]
							Name4 = Name[last-3]
							NAME = [Name1,Name2,Name3,Name4].join("")
							if NAME == "crs." and not file.is_binary and not file.is_folder then underline = under2
						end if
						if nameFile.values[0] == "." then underline = under4
						permission = file.permissions
						owner = file.owner
						size = file.size
						size = size.val/1000000
						size = round(size, 0)
						group = file.group
						output = color2+permission+" "+color3+owner+" "+group+" "+color1+size+"MB "+underline+color2+b+nameFile+b2+u2
						list.push(output)
					end for
					list = ""+list.join("\n")
					print(format_columns(list))
				end if
				display = null
				if folder_objects != null then
					output = ""
					list = []
					for folder in folder_objects
						nameFolder = folder.name
						if nameFolder.values[0] == "." then display = under4+color2+b+nameFolder+b2+u2 else display = color2+b+nameFolder+b2
						permission = folder.permissions
						owner = folder.owner
						size = folder.size
						size = size.val/1000000
						size = round(size, 0)
						group = folder.group
						output = color2+permission+" "+color3+owner+" "+group+" "+color1+size+"MB "+display
						list.push(output)
					end for
					list = ""+list.join("\n")
					print(format_columns(list))
				end if
			end if
			continue
		end if



		continue
	end if


	if global.opt[0] == "ps" and global.opt.len == 1 then


		if live == true then
			name_list = []

			result = extract(Shell, "pull_keep", "shell")
			shell = result[0]
			ip = result[1]
			user = result[2]
			password = result[3]
			output = shell.host_computer.show_procs
			lines = output.split("\n")
			string = ""
			x = 0
			for line in lines
				words = line.split(" ")
				if x == 0 then
					words[0] = color2+words[0]
					words[1] = color3+words[1]
					words[2] = color2+words[2]
					words[3] = color3+words[3]
					words[4] = color2+words[4]
					string = string+words.join(" ")+"\n"
				else
					words[0] = color1+words[0]
					words[1] = color1+words[1]
					words[2] = color1+words[2]
					words[3] = color1+words[3]
					words[4] = color1+words[4]
					string = string+words.join(" ")+"\n"
				end if
				x = x + 1
			end for
			if output.len <= 24 then
				print(color1+b+"No Available Procs"+b2)
				continue
			else
				print(format_columns(string))
			end if
			continue
		end if

		if live != true then
			name_list = []
			output = get_shell.host_computer.show_procs
			lines = output.split("\n")
			string = ""
			x = 0
			for line in lines
				words = line.split(" ")
				if x == 0 then
					words[0] = color2+words[0]
					words[1] = color3+words[1]
					words[2] = color2+words[2]
					words[3] = color3+words[3]
					words[4] = color2+words[4]
					string = string+words.join(" ")+"\n"
				else
					words[0] = color1+words[0]
					words[1] = color1+words[1]
					words[2] = color1+words[2]
					words[3] = color1+words[3]
					words[4] = color1+words[4]
					string = string+words.join(" ")+"\n"
				end if
				x = x + 1
			end for
			if output.len <= 24 then
				print(color1+b+"No Available Procs"+b2)
				continue
			else
				print(format_columns(string))
			end if
			continue
		end if

		continue
	end if

	if global.opt[0] == "pwd" and global.opt.len == 1 then

		if live == true then
			result = extract(Shell, "pull_keep", "shell")
			shell = result[0]
			ip = result[1]
			user = result[2]
			password = result[3]

			if not pipe.hasIndex("file") then
				MyFile = shell.host_computer.File(current_path)
				FILE = MyFile
				pipe["file"] = FILE
				pipe["path"] = pipe["file"].path
				print(color1+b+pipe["path"]+b2)
			else if pipe.hasIndex("file") and typeof(pipe["file"]) == "null" then
				MyFile = shell.host_computer.File(current_path)
				FILE = MyFile
				pipe["file"] = FILE
				pipe["path"] = pipe["file"].path
				print(color1+b+pipe["path"]+b2)
			else if pipe.hasIndex("file") and typeof(pipe["file"]) == "file" then
				pipe["path"] = pipe["file"].path
				FILE = shell.host_computer.File(pipe["path"])
				print(color1+b+FILE.path+b2)
			else
			end if


			continue
		end if

		if live != true then

			if not pipe.hasIndex("file") then
				MyFile = get_shell.host_computer.File(current_path)
				FILE = MyFile
				pipe["file"] = FILE
				pipe["path"] = pipe["file"].path
				print(color1+b+pipe["path"]+b2)
			else if pipe.hasIndex("file") and typeof(pipe["file"]) == "null" then
				MyFile = get_shell.host_computer.File(current_path)
				FILE = MyFile
				pipe["file"] = FILE
				pipe["path"] = pipe["file"].path
				print(color1+b+pipe["path"]+b2)
			else if pipe.hasIndex("file") and typeof(pipe["file"]) == "file" then
				pipe["path"] = pipe["file"].path
				FILE = get_shell.host_computer.File(pipe["path"])
				print(color1+b+FILE.path+b2)
			else
			end if

			continue
		end if


		continue
	end if

	if global.opt[0] == "ifconfig" and global.opt.len then

		if live == true then

			result = extract(Shell, "pull_keep", "shell")
			shell = result[0]
			ip = result[1]
			user = result[2]
			password = result[3]

			if shell.host_computer.is_network_active then
				computer = shell.host_computer
				public = color1+shell.host_computer.public_ip
				router = get_router(shell.host_computer.public_ip)
				local = color1+shell.host_computer.local_ip
				gateway = shell.host_computer.network_gateway
				connected_q = shell.host_computer.is_network_active
				if computer.active_net_card == "WIFI" then
					print("\n"+color2+"WIFI connection:\n"+color2+b+"Essid: "+b2+router.essid_name+"\n"+color2+b+"Bssid: "+b2+router.bssid_name)
				else
					print("\n"+color2+"ETHERNET connection:")
				end if
				print(color3+"----------------")
				print(color1+b+"Public IP: "+b2+public)
				print(color1+b+"Local IP: "+b2+local)
				print(color1+b+"Gateway: "+b2+gateway)
			else
				print(color3+"----------------")
				print(color1+"Public IP: 0.0.0.0")
				print(color1+"Local IP: 0.0.0.0")
				print(color1+"Gateway: 0.0.0.0")
			end if

			continue
		end if

		if live != true then
			if get_shell.host_computer.is_network_active then
				computer = get_shell.host_computer
				router = get_router
				public = color1+get_shell.host_computer.public_ip
				local = color1+get_shell.host_computer.local_ip
				gateway = get_shell.host_computer.network_gateway
				connected_q = get_shell.host_computer.is_network_active
				if computer.active_net_card == "WIFI" then
					print("\n"+color2+"Connected to Wi-Fi:\n"+color2+b+"Essid: "+b2+router.essid_name+"\n"+color2+b+"Bssid: "+b2+router.bssid_name)
				else
					print("\n"+color1+"Ethernet connection:"    )
				end if
				print(color3+"----------------")
				print(color1+b+"Public IP: "+b2+public)
				print(color1+b+"Local IP: "+b2+local)
				print(color1+b+"Gateway: "+b2+gateway)
			else
				print(color3+"----------------")
				print(color1+"Public IP: 0.0.0.0")
				print(color1+"Local IP: 0.0.0.0")
				print(color1+"Gateway: 0.0.0.0")
			end if

			continue
		end if


		continue
	end if

	if global.opt[0] == "iwconfig" and global.opt.len == 1 then
		print("\n"+b+color2+u+color1+"Usage:"+u2+" iwconfig [net device] [bssid] [essid name] [passkey]"+"</color>"+b2)
		continue
	end if

	if global.opt[0] == "iwconfig" and global.opt.len == 5 and typeof(global.opt[1]) == "string" and typeof(global.opt[2]) == "string" and typeof(global.opt[3]) == "string" and typeof(global.opt[4]) == "string" then
		computer = get_shell.host_computer
		devices = computer.network_devices
		if devices == null or devices.indexOf(global.opt[1]) == null then
			print("\n"+color1+b+"["+b2+color3+"ERROR "+color1+b+"("+b2+color3+global.opt[0]+color1+b+"):"+b2+color2+" Network device not found..."+color1+b+"]"+b2)
			wait(2)
			clear_screen
			continue
		end if
		bssid = global.opt[2]
		essid = global.opt[3]
		password = global.opt[4]
		status = computer.connect_wifi(global.opt[1], bssid, essid, password)
		if typeof(status) == "string" then
			print(color1+status)
			continue
		end if
		print("\n"+color1+"["+color2+"Connected to "+b+essid+b2+color1+"]")

		if live == true then

			continue
		end if

		if live != true then

			continue
		end if

		continue
	end if

	if global.opt[0] == "iwlist" and global.opt.len == 1 then
		//usage
		continue
	end if

	if global.opt[0] == "iwlist" and global.opt.len == 2 and typeof(global.opt[1]) == "string" then
		if global.opt[1] != "wlan0" and global.opt[1] != "eth0" then
			print(color1+"iwlist: Network device not found.")
			continue
		else
			print(color2+b+"BSSID"+color2+"             PWR"+color2+" ESSID"+b2)
			devices = get_shell.host_computer.wifi_networks(global.opt[1])
			for item in devices
				print(color1+item)
			end for
		end if

		if live == true then

			continue
		end if

		if live != true then

			continue
		end if

		continue
	end if

	if global.opt[0] == "cat" and global.opt.len == 1 then
		//usage
	end if

	if global.opt[0] == "cat" and global.opt.len == 2 and typeof(global.opt[1].split("/")) == "list" then

		if live == true then
			file = shell.host_computer.File(global.opt[1])
			if not file or file.is_folder then
				print("\n"+color1+b+"["+color1+b+"("+b2+color3+global.opt[1].split("/")[-1]+color1+b+"):"+b2+color2+" File does not exist."+color1+b+"]"+b2)
				continue
			end if
			if file.get_content == "" then
				print("\n"+color1+b+"["+color1+b+"("+b2+color3+global.opt[1].split("/")[-1]+color1+b+"):"+b2+color2+" File is empty."+color1+b+"]"+b2)
				continue
			else
				print(color2+b+global.opt[1].split("/")[-1]+": "+b2)
				print(color2+b+"--------------------------------------------------"+b2)
				lines = file.get_content.split("\n")
				for line in lines
					print(color1+line)
				end for
				print(color2+b+"--------------------------------------------------"+b2)
				pipe["file"] = file
				pipe["path"] = pipe["file"].path
				continue
			end if

		end if

		if live != true then
			file = get_shell.host_computer.File(global.opt[1])
			if not file or file.is_folder then
				print("\n"+color1+b+"["+color1+b+"("+b2+color3+global.opt[1].split("/")[-1]+color1+b+"):"+b2+color2+" File does not exist."+color1+b+"]"+b2)
				continue
			end if
			if file.get_content == "" then
				print("\n"+color1+b+"["+color1+b+"("+b2+color3+global.opt[1].split("/")[-1]+color1+b+"):"+b2+color2+" File is empty."+color1+b+"]"+b2)
				continue
			else
				print(color2+b+global.opt[1].split("/")[-1]+": "+b2)
				print(color2+b+"--------------------------------------------------"+b2)
				lines = file.get_content.split("\n")
				for line in lines
					print(color1+line)
				end for
				print(color2+b+"--------------------------------------------------"+b2)
				continue
			end if

		end if

		continue
	end if

	if global.opt[0] == "rm" and global.opt.len == 1 then
		//usage
		continue
	end if

	if global.opt[0] == "rm" and global.opt.len == 2 and typeof(global.opt[1].split("/")) == "list" then
		file = get_shell.host_computer.File(global.opt[1])
		if not file or file.is_folder then
			print(color1+b+file.path+b2+" has been removed.")
			continue
		else
			file.delete
			continue
		end if

		if live == true then

			continue
		end if

		if live != true then

			continue
		end if

		continue
	end if

	if global.opt[0] == "mv" and global.opt.len == 1 then
		//usage
	end if

	if global.opt[0] == "mv" and global.opt.len == 3 and typeof(global.opt[1].split("\n")) == "list" and typeof(global.opt[2].split("\n")) == "list" then
		origFile = global.opt[1]
		destFolder = global.opt[2]

		computer = get_shell.host_computer
		file = computer.File(origFile)
		if file == null then
			print("mv: can't find " + origFile)

		else
			newName = ""
			folder = computer.File(destFolder)
			if folder == null then
				//Check if the user wants to put a new name.
				pathParent = parent_path(destFolder)

				if pathParent == destFolder then
					newName = destFolder
					destFolder = file.parent.path
					file.move(destFolder, newName)

				else

					folder = computer.File(pathParent)
					newName = destFolder[destFolder.len - (destFolder.len - pathParent.len):]
					if newName[0] == "/" then
						newName = newName[1:]
					end if
					if folder == null then
						print("mv: can't copy file. " + destFolder + " doesn't exist.")
					end if
				end if

			end if

			if folder != null then

				//Check if is trying to copy the file on itself. Ignored.
				if file.parent.path != folder.parent.path or file.name != folder.name then

					finalDest = folder.path

					if(newName.len == 0) then
						newName = file.name
					end if

					if not folder.is_folder then
						finalDest = file.parent.path
						newName = folder.name
					end if

					if file.parent.path == folder.parent.path and newName != file.name then
						file.rename(newName)
					else
						file.move(finalDest, newName)
					end if
				end if
			end if
		end if

		if live == true then

			continue
		end if

		if live != true then

			continue
		end if

		continue
	end if

	if global.opt[0] == "cp" and global.opt.len == 1 then
		//usage
	end if

	if global.opt[0] == "cp" and global.opt.len == 3 and typeof(global.opt[1].split("/")) == "list" and typeof(global.opt[2].split("/")) == "list" then

		origFile = global.opt[1]
		destFolder = global.opt[2]

		computer = get_shell.host_computer
		file = computer.File(origFile)
		if not file then exit("cp: can't find " + origFile)

		newName = ""
		folder = computer.File(destFolder)
		if not folder then
			//Check if the user wants to put a new name.
			pathParent = parent_path(destFolder)

			if pathParent == destFolder then
				newName = destFolder
				destFolder = file.parent.path
				output = file.copy(destFolder, newName)
				if output and output != 1 then print(output)
				exit
			end if

			folder = computer.File(pathParent)
			newName = destFolder[destFolder.len - (destFolder.len - pathParent.len):]
			if newName[0] == "/" then
				newName = newName[1:]
			end if
			if not folder then exit("cp: can't copy file. " + destFolder + " doesn't exist.")

		end if

		if folder then

			//Check if is trying to copy the file on itself. Ignored.
			if file.parent.path != folder.parent.path or file.name != folder.name then

				finalDest = folder.path

				if(newName.len == 0) then
					newName = file.name
				end if

				if not folder.is_folder then
					finalDest = file.parent.path
					newName = folder.name
				end if

				output = file.copy(finalDest, newName)
				if output and output != 1 then print(output)

			end if
		end if

		if live == true then

			continue
		end if

		if live != true then

			continue
		end if

		continue
	end if

	if global.opt[0] == "ssh" and global.opt.len == 3 and global.opt[1].split("@").len == 2 and global.opt[2].split(".").len == 4 then

		if live == true then

			result = extract(Shell, "pull_keep", "shell")
			SHELL = result[0]

			credentials = global.opt[1].split("@")
			global.user = credentials[0]
			password = credentials[1]
			ip = global.opt[2]
			port = 22
			// params is a list of strings, so you have to convert it to integer, which is what connect_service accepts.

			shell = get_shell.connect_service(ip, port, global.user, password, "ssh")
			if not shell then
				print(color1+b+"connection failed.")
				continue
			end if
			if shell then
				global.ip = shell.host_computer.public_ip
				ip = SHELL.host_computer.public_ip
				if global.ip == ip then
					print(color1+b+"Terminal already open."+b2)
					continue
				end if
				belt.push(shell)
				belt.push(global.ip)
				belt.push(global.user)
				belt.push(password)
				Shell["shell"] = belt
				prompt = "\n"+b+color1+"["+b2+"<color=red>"+global.user+color1+b+"]"+b2+color1+b+u+"<"+color2+global.ip+"</color>>"+u2+b2+"</color>"+"<u><"+b2+color3+current_path+color1+b+">"+b2+"</u></color>~$ "
				live = true
				belt = []
				continue
			end if
			continue
		end if

		if live != true then
			credentials = global.opt[1].split("@")
			global.user = credentials[0]
			password = credentials[1]
			ip = global.opt[2]
			port = 22
			// params is a list of strings, so you have to convert it to integer, which is what connect_service accepts.

			shell = get_shell.connect_service(ip, port, global.user, password, "ssh")
			if shell then
				global.ip = shell.host_computer.public_ip
				belt.push(shell)
				belt.push(global.ip)
				belt.push(global.user)
				belt.push(password)
				Shell["shell"] = belt
				prompt = "\n"+b+color1+"["+b2+"<color=red>"+global.user+color1+b+"]"+b2+color1+b+u+"<"+color2+global.ip+"</color>>"+u2+b2+"</color>"+"<u><"+b2+color3+current_path+color1+b+">"+b2+"</u></color>~$ "
				live = true
				belt = []
				continue
			end if
			continue
		end if

		continue
	end if

	if global.opt[0] == "ftp" and global.opt.len == 3 and global.opt[1].split("@").len == 2 and global.opt[2].split(".").len == 4 then

		if live == true then

			result = extract(Shell, "pull_keep", "shell")
			SHELL = result[0]

			credentials = global.opt[1].split("@")
			global.user = credentials[0]
			password = credentials[1]
			ip = global.opt[2]
			port = 22
			// params is a list of strings, so you have to convert it to integer, which is what connect_service accepts.

			shell = get_shell.connect_service(ip, port, global.user, password, "ssh")
			if not shell then
				print(color1+b+"connection failed.")
				continue
			end if
			if shell then
				global.ip = shell.host_computer.public_ip
				ip = SHELL.host_computer.public_ip
				if global.ip == ip then
					print(color1+b+"Terminal already open."+b2)
					continue
				end if
				belt.push(shell)
				belt.push(global.ip)
				belt.push(global.user)
				belt.push(password)
				Shell["shell"] = belt
				prompt = "\n"+b+color1+"["+b2+"<color=red>"+global.user+color1+b+"]"+b2+color1+b+u+"<"+color2+global.ip+"</color>>"+u2+b2+"</color>"+"<u><"+b2+color3+current_path+color1+b+">"+b2+"</u></color>~$ "
				live = true
				belt = []
				continue
			end if
			continue
		end if

		if live != true then
			credentials = global.opt[1].split("@")
			global.user = credentials[0]
			password = credentials[1]
			ip = global.opt[2]
			port = 22
			// params is a list of strings, so you have to convert it to integer, which is what connect_service accepts.

			shell = get_shell.connect_service(ip, port, global.user, password, "ssh")
			if shell then
				global.ip = shell.host_computer.public_ip
				belt.push(shell)
				belt.push(global.ip)
				belt.push(global.user)
				belt.push(password)
				Shell["shell"] = belt
				prompt = "\n"+b+color1+"["+b2+"<color=red>"+global.user+color1+b+"]"+b2+color1+b+u+"<"+color2+global.ip+"</color>>"+u2+b2+"</color>"+"<u><"+b2+color3+current_path+color1+b+">"+b2+"</u></color>~$ "
				live = true
				belt = []
				continue
			end if
			continue
		end if

		continue
	end if

	if global.opt[0] == "attack" and global.opt.len >= 2 and global.opt[1].split(".").len == 4 then
	ip = global.opt[1]
	while not is_valid_ip(ip)
		print("<color=yellow>Invalid Ip...")
		ip = user_input("<color=white>ip address: ")
	end while

	metaxploit = include_lib("/lib/metaxploit.so")
	if not metaxploit then exit("you don't have metaxploit.so in your /lib dir")
	HandleResult = function(result)



	end function

	//integrate parse into msf
	parse = function(results)
		found = 0
		List = []
		line = results.split(" ")
		line.reverse
		for word in line
			if found == 1 then
				word = word.remove(".")
				word = word.remove("<b>")
				word = word.remove("</b>")
				List.push(word)
				found = 0
			end if
			if found == 0 then
				if word == "Buffer" then
					found = 1
				end if
			end if
		end for

		return List
	end function

	if global.opt.hasIndex(2) and (global.opt[2] == "0" or global.opt[2] == "router" or global.opt[2] == "8080") then
	net = metaxploit.net_use(ip)
	router = get_router(ip).local_ip
	else
	router = get_router(ip)
  ports = router.used_ports
  for p in ports
    print(color1+b+p.get_lan_ip+" "+color2+p.port_number+b2)
  end for
	target_p = user_input(color1+"PORT:</color>"+color3+" ")
	net = metaxploit.net_use(ip, target_p.val)
	end if

	if not net and global.opt.hasIndex(2) then
	print(color2+"Connection Failed...")
	continue
	end if

	while not net and not global.opt.hasIndex(2)
		print(color2+"Invalid Port.")
		wait(1)
		clear_screen
		for p in ports
			print(color1+b+p.get_lan_ip+" "+color2+p.port_number+b2)
		end for
		target_p = user_input(color1+"PORT:</color>"+color3+" ")
		net = metaxploit.net_use(ip, target_p.val)
		if target_p == "back" then
			okay = true
			break
		end if
	end while
	if okay == true then
		okay = false
		continue
	end if

	if not net then exit("connection failed")
	Lib = net.dump_lib
	print("<color=orange>Target Library: " + Lib.lib_name + " " + Lib.version)
	print("<color=purple>NOTE: password modifications set to '1234' ")
	if global.opt.hasIndex(2) then arg = router else arg = "1234"
	Memories = metaxploit.scan(Lib)
	for memory in Memories
		print("<color=yellow>SCANNING MEMORY: " + memory)
		results = metaxploit.scan_address(Lib, memory)
		for payload in parse(results)
			print("<color=yellow>" + memory + " : <color=green>" + payload)
			result = Lib.overflow(memory, payload, arg)//changes password to '1234'
			resolution=[]

			if result then
			if typeof(result) == "shell" then
				person = result.host_computer.File(current_path).path.split("/")[-1]
				attack_shells.push([result, person])
				passwd = result.host_computer.File("/etc/passwd")
				if typeof(passwd) == "file" and passwd.has_permission("r") and okay != true then
					root = passwd.get_content.split("\n")[0].split(":")
					password = crypto.decipher(root[1])
					okay = true
				end if
			end if

			if typeof(result) == "computer" then
				passwd = result.File("/etc/passwd")
				if typeof(passwd) == "file" and passwd.has_permission("r") and okay != true then
					root = passwd.get_content.split("\n")[0].split(":")
					password = crypto.decipher(root[1])
					okay = true
				end if
			end if
			end if

		end for
	end for
	okay = false
	x = 0
	wait(.5)
	clear_screen
	for shell in attack_shells
	x=x+1
	print(color3+x+") "+color2+shell[0]+" "+color1+shell[1])
	end for
	if attack_shells.len != 0 then a = user_input(color2+b+"Which Shell?:"+color3+" ")
	while not attack_shells.hasIndex(a.to_int-1)
		print("\n"+color1+b+"["+b2+color3+"ERROR "+color1+a+"("+b2+color3+a+color1+b+"):"+b2+color2+" Shell not found..."+color1+b+"]"+b2)
		a = user_input(color2+b+"Which Shell?:"+color3+" ")
	end while
	if attack_shells.len == 0 then
	a = null
	print(color2+"No Shells Found...")
	continue
	end if

	if a != null and attack_shells.hasIndex(a.to_int-1) then
	okay = false
	shell = attack_shells[a.to_int-1][0]
	global.user = shell.host_computer.File(current_path).path.split("/")[-1]
	global.ip = shell.host_computer.public_ip

	belt.push(shell)
	belt.push(global.ip)
	belt.push(global.user)
	belt.push(password)
	Shell["shell"] = belt
	prompt = "\n"+b+color1+"["+b2+"<color=red>"+global.user+color1+b+"]"+b2+color1+b+u+"<"+color2+global.ip+"</color>>"+u2+b2+"</color>"+"<u><"+b2+color3+current_path+color1+b+">"+b2+"</u></color>~$ "
	live = true
	belt = []
	continue
	end if
		continue
	end if

	if global.opt[0] == "scp" and global.opt.len == 4 and global.opt.hasIndex(1) and typeof(global.opt[2].split("/")) == "list" and typeof(global.opt[3].split("/")) == "list" then
		d = false
		l = false


		if live == true and global.opt[1] == "-take" then
			result = extract(Shell, "pull_keep", "shell")
			shell = result[0]
			ip = result[1]
			user = result[2]
			password = result[3]


			d = get_shell.host_computer.File(global.opt[3]).path
			l = shell.host_computer.File(global.opt[2]).path

			shell.scp(l, d, get_shell)
			print(color1+global.opt[2].split("/")[-1]+" Has been recieved from "+color2+b+ip+b2)
			continue
		end if

		if live == true and global.opt[1] == "-give" then
		result = extract(Shell, "pull_keep", "shell")
		shell = result[0]
		ip = result[1]
		user = result[2]
		password = result[3]


		d = shell.host_computer.File(global.opt[3]).path
		l = get_shell.host_computer.File(global.opt[2]).path

		get_shell.scp(l, d, shell)
		print(color1+global.opt[2].split("/")[-1]+" Has been sent to "+color2+b+ip+b2)

		continue
		end if


		continue
	end if
	clear_screen
	print("\n"+color1+b+"["+b2+color3+"ERROR "+color1+b+"("+b2+color3+global.opt[0]+color1+b+"):"+b2+color2+" Command not found..."+color1+b+"]"+b2)
	wait(2)
	clear_screen


end while
